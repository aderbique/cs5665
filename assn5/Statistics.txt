#########################
# Chapter 5: Statistics
#########################

# data from our book - number of "friends" on the DataScienster website:
num_friends = [100,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

from matplotlib import pyplot as plt
from collections import Counter

def make_friend_counts_histogram(plt):
    friend_counts = Counter(num_friends)
    xs = range(101)
    ys = [friend_counts[x] for x in xs]
    plt.bar(xs, ys)
    plt.axis([0,101,0,25])
    plt.title("Histogram of Friend Counts")
    plt.xlabel("# of friends")
    plt.ylabel("# of people")
    plt.show()
	
make_friend_counts_histogram(plt)	

# Save plot as .png and/or open new cmd window while leaving plot open.

# Number of data elements.
len(num_friends)

# Maximum and Minimum
max(num_friends)
min(num_friends)

# Do the max an min require sorting to identify?
# No.

# But, sorting can be useful and is necessary for other computations.

sorted_values = sorted(num_friends)
smallest_value = sorted_values[0]
second_smallest_value = sorted_values[1]
second_largest_value = sorted_values[-2]

# What index do we use to get the max?
sorted_values[-1]

# Now, let's find the arithmetic mean.
sum(num_friends) / len(num_friends)

# Is this right? Look at the dividend and divisor.
sum(num_friends)
len(num_friends)

# These work.
float(sum(num_friends)) / len(num_friends)
sum(num_friends) / float(len(num_friends))
float(sum(num_friends)) / float(len(num_friends))

# This does not.
float(sum(num_friends) / len(num_friends))

# Our author gives the following solution:
# this isn't right if you don't from __future__ import division
#def mean(x): 
#    return sum(x) / len(x)

# Instead, we can do this.
def mean(x): 
    return float(sum(x)) / float(len(x))

# What is the purpose of the mean? What are some other names for the mean?
# Measure of Central Tendency
# Average
# Somewhere in the middle

# Is it in the middle? Look at the histogram.

# What is the middle value?

# Can you spot it in the list?
sorted_values

# What index do we use?
len(num_friends)

# Remember that lists are zero-indexed.
# Since there is an even number of elements, there is no single, middle element.
sorted_values[101]
sorted_values[102]

# We will take the average of these. Don't forget that we want floating point operations.
median = (sorted_values[101] + sorted_values[102]) / 2.0

# Here is our book's definition. Is it correct?
def median(v):
    n = len(v)
    sorted_v = sorted(v)
    midpoint = n // 2
    if n % 2 == 1:
        # if odd, return the middle value
        return sorted_v[midpoint]
    else:
        # if even, return the average of the middle values
        lo = midpoint - 1
        hi = midpoint
        return (sorted_v[lo] + sorted_v[hi]) / 2

median(num_friends)

# Here is a slight modification to correct it.
def median(v):
    n = len(v)
    sorted_v = sorted(v)
    midpoint = n // 2
    if n % 2 == 1:
        # if odd, return the middle value
        return sorted_v[midpoint]
    else:
        # if even, return the average of the middle values
        lo = midpoint - 1
        hi = midpoint
		# Note that in our book, the divisor is 2, not 2.0.
        return (sorted_v[lo] + sorted_v[hi]) / 2.0
		
median(num_friends)

# How does the median compare to the mean???	
mean(num_friends)		

# Look at the histogram. How do you explain the difference between the mean and median?

# Our book defines quantiles as follows:
def quantile(x, p):
    p_index = int(p * len(x))
    return sorted(x)[p_index]
	
# What is a quantile?
# It divides the data such that a given percentage of the data is less than (or perhaps equal to) the value.
# Is our book's definition correct?
# Does it jive with our definition of median?

# Suppose our data set has 5 elements. Example: range(5).
range(5)
# Which element does quantile(x,0.5) return? Index = int(0.5 * 5) = int(2.5) = 2, which is correct.
quantile(range(5),0.5)
# Which element does quantile(x,0.25) return? Index = int(0.25 * 5) = int(1.25) = 1, which is correct.
quantile(range(5),0.25)
# Which element does quantile(x,0.75) return? Index = int(0.75 * 5) = int(3.75) = 3, which is correct.
quantile(range(5),0.75)
# Which element does quantile(x,0.0) return? Index = int(0.0 * 5) = int(0) = 0. Correct or incorrect?
quantile(range(5),0.0)
# Which element does quantile(x,1.0) return? Index = int(1.0 * 5) = int(5) = 5. Correct or incorrect?
quantile(range(5),1.0)

# Perhaps this is a better definition?
def quantile(x, p):
    p_index = int(p * (len(x)-1))
    return sorted(x)[p_index]
	
# It fixes the problem above, but is it correct? Again, does it jive with our definition of median?
# Suppose our data set has 8 elements.
# Which element does quantile(x,0.5) return? Index = int(0.5 * 7) = int(3.5) = 3. Is this correct?
quantile(range(8),0.5)

# Consider this definition:
def quantile(x,p):
    n = len(x)
    sorted_x = sorted(x)
    midpoint = p * (n-1)	
    if (midpoint == int(midpoint)):
        return sorted_x[int(midpoint)]
    else:
        lo = int(midpoint)
        hi = lo + 1
        return (hi - midpoint) * sorted_x[lo] + (midpoint - lo) * sorted_x[hi]

# Is this correct? Think it over ...

# Next is the mode.		
def mode(x):
    counts = Counter(x)
    max_count = max(counts.values())
    return [x_i for x_i, count in counts.iteritems()
            if count == max_count]		

mode(num_friends)
	
# Is the mode a measure of central tendency? Will it occur near the center?

# Now we look at measures of dispersion ...

# Now for range.
# "range" already means something in Python, so we'll use a different name
def data_range(x):
    return max(x) - min(x)
	
data_range(num_friends)
	
# de_mean
def de_mean(x):
    x_bar = mean(x)
    return [x_i - x_bar for x_i in x]	
	
de_mean(num_friends)

# Our author defines variance as follows:
def variance(x):
    """assumes x has at least two elements"""
    n = len(x)
    deviations = de_mean(x)
    return sum_of_squares(deviations) / (n - 1)
	
# This isn't correct, and he appears to do this for convenience for subsequent computation of the standard deviation.
# Instead, he should use:
def variance(x):
    n = len(x)
    deviations = de_mean(x)
    return sum_of_squares(deviations) / n	
	
# We need to import these to do more.
import math
from linear_algebra import sum_of_squares, dot

# He then defines standard deviation in terms of variance:	
def standard_deviation(x):
    return math.sqrt(variance(x))
	
standard_deviation(num_friends)
	
# This is fine for the "population" standard deviation given our revised definition of variance.
# But, for a sample standard deviation, would would have the following given our definition of variance:
def sample_standard_deviation(x):
    n = len(x)
    return math.sqrt(variance(x)*(float(n)/float(n-1)))
	
sample_standard_deviation(num_friends)

# Now define the interquartile range as another measure of dispersion.
def interquartile_range(x):
    return quantile(x, 0.75) - quantile(x, 0.25)
	
interquartile_range(num_friends)	
	
# Not in our book - normalization by z-score.
# normalize
def normalize(x):
    x_bar = mean(x)
    sigma = standard_deviation(x)
    return [(x_i - x_bar)/sigma for x_i in x]

normalize(num_friends)	

######################################################################################################################

# Number of minutes spent on the DataScienster Website.
daily_minutes = [1,68.77,51.25,52.08,38.36,44.54,57.13,51.4,41.42,31.22,34.76,54.01,38.79,47.59,49.1,27.66,41.03,36.73,48.65,28.12,46.62,35.57,32.98,35,26.07,23.77,39.73,40.57,31.65,31.21,36.32,20.45,21.93,26.02,27.34,23.49,46.94,30.5,33.8,24.23,21.4,27.94,32.24,40.57,25.07,19.42,22.39,18.42,46.96,23.72,26.41,26.97,36.76,40.32,35.02,29.47,30.2,31,38.11,38.18,36.31,21.03,30.86,36.07,28.66,29.08,37.28,15.28,24.17,22.31,30.17,25.53,19.85,35.37,44.6,17.23,13.47,26.33,35.02,32.09,24.81,19.33,28.77,24.26,31.98,25.73,24.86,16.28,34.51,15.23,39.72,40.8,26.06,35.76,34.76,16.13,44.04,18.03,19.65,32.62,35.59,39.43,14.18,35.24,40.13,41.82,35.45,36.07,43.67,24.61,20.9,21.9,18.79,27.61,27.21,26.61,29.77,20.59,27.53,13.82,33.2,25,33.1,36.65,18.63,14.87,22.2,36.81,25.53,24.62,26.25,18.21,28.08,19.42,29.79,32.8,35.99,28.32,27.79,35.88,29.06,36.28,14.1,36.63,37.49,26.9,18.58,38.48,24.48,18.95,33.55,14.24,29.04,32.51,25.63,22.22,19,32.73,15.16,13.9,27.2,32.01,29.27,33,13.74,20.42,27.32,18.23,35.35,28.48,9.08,24.62,20.12,35.26,19.92,31.02,16.49,12.16,30.7,31.22,34.65,13.13,27.51,33.2,31.57,14.1,33.42,17.44,10.12,24.42,9.82,23.39,30.93,15.03,21.67,31.09,33.29,22.61,26.89,23.48,8.38,27.81,32.35,23.84]

from matplotlib import pyplot as plt

plt.scatter(num_friends,daily_minutes)
plt.title("# friends vs. minutes per day")
plt.xlabel("# of friends")
plt.ylabel("minutes per day")
plt.show()

# Our book's definition of covariance.
def covariance(x, y):
    n = len(x)
    return dot(de_mean(x), de_mean(y)) / (n - 1)
	
# Here is the correct definition.
def covariance(x, y):
    n = len(x)
    return dot(de_mean(x), de_mean(y)) / n
	
# Now define correlation:
def correlation(x, y):
    stdev_x = standard_deviation(x)
    stdev_y = standard_deviation(y)
    if stdev_x > 0 and stdev_y > 0:
        return covariance(x, y) / stdev_x / stdev_y
    else:
        return 0 # if no variation, correlation is zero	
		
# Now compute the correlation between number of friends and daily minutes.
correlation(num_friends,daily_minutes)		
	
# Reverse the order and what do we get?
correlation(daily_minutes,num_friends)		

# Our authors treatment of an apparent outlier:

outlier = num_friends.index(100) # index of outlier

num_friends_good = [x 
                    for i, x in enumerate(num_friends) 
                    if i != outlier]

daily_minutes_good = [x 
                      for i, x in enumerate(daily_minutes) 
                      if i != outlier]
					  
correlation(num_friends_good,daily_minutes_good)	

#####################################################################################################################################################
# Now look at boxplots ...

from matplotlib import pyplot as plt
plt.boxplot(num_friends)
plt.show()

